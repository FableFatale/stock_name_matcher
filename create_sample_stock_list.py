#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
创建示例股票列表
当无法从API获取数据时，创建一个包含更多股票的示例列表
"""

import pandas as pd
import os
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_comprehensive_stock_list():
    """创建包含更多股票的示例列表"""
    
    # 扩展的股票数据，包含各个板块的代表性股票
    stock_data = [
        # 沪市主板 - 大盘蓝筹
        {'股票代码': '600036', '股票名称': '招商银行', '最新价': 35.80, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '600519', '股票名称': '贵州茅台', '最新价': 1680.00, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '600000', '股票名称': '浦发银行', '最新价': 8.95, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '601318', '股票名称': '中国平安', '最新价': 45.80, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '601166', '股票名称': '兴业银行', '最新价': 18.50, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '600276', '股票名称': '恒瑞医药', '最新价': 58.20, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '601012', '股票名称': '隆基绿能', '最新价': 22.30, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '600309', '股票名称': '万华化学', '最新价': 78.50, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '601888', '股票名称': '中国中免', '最新价': 85.60, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '600585', '股票名称': '海螺水泥', '最新价': 28.90, '市场': '上海', '股票类型': '沪市主板'},
        
        # 科创板
        {'股票代码': '688001', '股票名称': '华兴源创', '最新价': 45.67, '市场': '上海', '股票类型': '科创板'},
        {'股票代码': '688036', '股票名称': '传音控股', '最新价': 89.50, '市场': '上海', '股票类型': '科创板'},
        {'股票代码': '688111', '股票名称': '金山办公', '最新价': 285.00, '市场': '上海', '股票类型': '科创板'},
        {'股票代码': '688599', '股票名称': '天合光能', '最新价': 35.20, '市场': '上海', '股票类型': '科创板'},
        {'股票代码': '688981', '股票名称': '中芯国际', '最新价': 58.80, '市场': '上海', '股票类型': '科创板'},
        
        # 深市主板
        {'股票代码': '000001', '股票名称': '平安银行', '最新价': 10.50, '市场': '深圳', '股票类型': '深市主板'},
        {'股票代码': '000002', '股票名称': '万科A', '最新价': 18.20, '市场': '深圳', '股票类型': '深市主板'},
        {'股票代码': '000858', '股票名称': '五粮液', '最新价': 128.50, '市场': '深圳', '股票类型': '深市主板'},
        {'股票代码': '000725', '股票名称': '京东方A', '最新价': 3.85, '市场': '深圳', '股票类型': '深市主板'},
        {'股票代码': '000568', '股票名称': '泸州老窖', '最新价': 158.90, '市场': '深圳', '股票类型': '深市主板'},
        
        # 中小板
        {'股票代码': '002415', '股票名称': '海康威视', '最新价': 32.50, '市场': '深圳', '股票类型': '中小板'},
        {'股票代码': '002594', '股票名称': '比亚迪', '最新价': 245.80, '市场': '深圳', '股票类型': '中小板'},
        {'股票代码': '002352', '股票名称': '顺丰控股', '最新价': 45.60, '市场': '深圳', '股票类型': '中小板'},
        {'股票代码': '002714', '股票名称': '牧原股份', '最新价': 52.30, '市场': '深圳', '股票类型': '中小板'},
        {'股票代码': '002475', '股票名称': '立讯精密', '最新价': 28.90, '市场': '深圳', '股票类型': '中小板'},
        
        # 创业板
        {'股票代码': '300059', '股票名称': '东方财富', '最新价': 15.80, '市场': '深圳', '股票类型': '创业板'},
        {'股票代码': '300750', '股票名称': '宁德时代', '最新价': 185.50, '市场': '深圳', '股票类型': '创业板'},
        {'股票代码': '300015', '股票名称': '爱尔眼科', '最新价': 18.90, '市场': '深圳', '股票类型': '创业板'},
        {'股票代码': '300142', '股票名称': '沃森生物', '最新价': 28.60, '市场': '深圳', '股票类型': '创业板'},
        {'股票代码': '300760', '股票名称': '迈瑞医疗', '最新价': 285.00, '市场': '深圳', '股票类型': '创业板'},
        
        # 北交所
        {'股票代码': '832175', '股票名称': '东方碳素', '最新价': 6.48, '市场': '北京', '股票类型': '北交所'},
        {'股票代码': '871263', '股票名称': '莱赛激光', '最新价': 9.95, '市场': '北京', '股票类型': '北交所'},
        {'股票代码': '836149', '股票名称': '旭杰科技', '最新价': 7.31, '市场': '北京', '股票类型': '北交所'},
        {'股票代码': '833230', '股票名称': '欧康医药', '最新价': 9.61, '市场': '北京', '股票类型': '北交所'},
        {'股票代码': '430476', '股票名称': '海能技术', '最新价': 6.10, '市场': '北京', '股票类型': '北交所'},
        
        # 更多各行业代表股票
        {'股票代码': '600104', '股票名称': '上汽集团', '最新价': 15.20, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '600887', '股票名称': '伊利股份', '最新价': 28.50, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '601398', '股票名称': '工商银行', '最新价': 4.85, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '601939', '股票名称': '建设银行', '最新价': 6.20, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '600028', '股票名称': '中国石化', '最新价': 5.45, '市场': '上海', '股票类型': '沪市主板'},
        {'股票代码': '000876', '股票名称': '新希望', '最新价': 12.80, '市场': '深圳', '股票类型': '深市主板'},
        {'股票代码': '002230', '股票名称': '科大讯飞', '最新价': 38.90, '市场': '深圳', '股票类型': '中小板'},
        {'股票代码': '300033', '股票名称': '同花顺', '最新价': 85.60, '市场': '深圳', '股票类型': '创业板'},
        {'股票代码': '300124', '股票名称': '汇川技术', '最新价': 58.20, '市场': '深圳', '股票类型': '创业板'},
        {'股票代码': '300408', '股票名称': '三环集团', '最新价': 22.30, '市场': '深圳', '股票类型': '创业板'},
    ]
    
    # 转换为DataFrame
    df = pd.DataFrame(stock_data)
    
    # 添加清理名称
    df['清理名称'] = df['股票名称'].apply(clean_stock_name)
    
    # 添加更新时间
    df['数据更新时间'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # 添加一些模拟的财务数据
    import random
    df['涨跌幅'] = [round(random.uniform(-5, 5), 2) for _ in range(len(df))]
    df['涨跌额'] = df.apply(lambda row: round(row['最新价'] * row['涨跌幅'] / 100, 2), axis=1)
    df['成交量'] = [random.randint(100000, 10000000) for _ in range(len(df))]
    df['成交额'] = df.apply(lambda row: row['最新价'] * row['成交量'], axis=1)
    df['市盈率'] = [round(random.uniform(8, 50), 2) for _ in range(len(df))]
    df['市净率'] = [round(random.uniform(0.8, 5), 2) for _ in range(len(df))]
    df['总市值'] = df.apply(lambda row: row['最新价'] * random.randint(1000000000, 100000000000), axis=1)
    df['流通市值'] = df.apply(lambda row: row['总市值'] * random.uniform(0.6, 1.0), axis=1)
    
    return df

def clean_stock_name(name):
    """清理股票名称"""
    if pd.isna(name):
        return ""
    
    # 移除常见的后缀
    suffixes = ['股份有限公司', '有限公司', '集团', '控股', '股份', 'A', 'B', 'H']
    cleaned = str(name).strip()
    
    for suffix in suffixes:
        if cleaned.endswith(suffix):
            cleaned = cleaned[:-len(suffix)]
    
    return cleaned.strip()

def main():
    """主函数"""
    logger.info("创建示例股票列表...")
    
    # 确保data目录存在
    if not os.path.exists("data"):
        os.makedirs("data")
        logger.info("创建data目录")
    
    # 创建股票数据
    stock_df = create_comprehensive_stock_list()
    
    # 保存为CSV文件
    filename = "data/stock_list_latest.csv"
    stock_df.to_csv(filename, index=False, encoding='utf-8-sig')
    logger.info(f"示例股票列表已保存到: {filename}")
    
    # 显示统计信息
    print("\n📊 示例股票数据统计:")
    print(f"总股票数: {len(stock_df)}")
    print(f"数据更新时间: {stock_df['数据更新时间'].iloc[0]}")
    
    # 市场分布
    market_stats = stock_df['市场'].value_counts()
    print("\n🏢 市场分布:")
    for market, count in market_stats.items():
        print(f"  {market}: {count} 只")
    
    # 类型分布
    type_stats = stock_df['股票类型'].value_counts()
    print("\n📋 类型分布:")
    for stock_type, count in type_stats.items():
        print(f"  {stock_type}: {count} 只")
    
    print(f"\n✅ 示例数据创建完成！包含 {len(stock_df)} 只股票")
    print("现在可以使用本地股票数据功能了")

if __name__ == "__main__":
    main()
